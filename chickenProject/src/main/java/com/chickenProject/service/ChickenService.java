package com.chickenProject.service;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import com.chickenProject.repo.ChickenRepo;
import com.chickenProject.entity.Chicken;
import com.chickenProject.entity.Chicken;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import org.springframework.stereotype.Service;


@Service
public class ChickenService {
    
    @Autowired
    private ChickenRepo chickenRepo;

    public Chicken save(Chicken chicken) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

	    return chickenRepo.save(chicken);
	}
	
	public Chicken update(Chicken chicken) throws Exception {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

        if(chicken.getId() != null) {
	        return chickenRepo.save(chicken);
        }

        throw new Exception("Object does not exist! id not present");
	}
    
    public Chicken findById(Integer chickenId) throws Error {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the chicken will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(chickenRepo.findById(chickenId).isPresent()) {
            return chickenRepo.findById(chickenId).get();
        }
        
        // if chicken is not present, throw error so front end can handle it
        throw new Error("No chicken id present, Chicken not found, send an id billy, dumbass");
        
    }

	public List<Chicken> findAll() {
		return chickenRepo.findAll();
	}

    public void deleteById(Integer id) {
	    chickenRepo.deleteById(id);
	}

    public Long calculateAgeInWeeks(Chicken chicken){
        LocalDate dateOfBirth = chicken.getBirthdate();
        Long daysBetween = ChronoUnit.DAYS.between(dateOfBirth, LocalDate.now());
        return (daysBetween/7);
    }

    

    //method to get feed needs of a chick
    // getFeedNeeds(chicken){
    // double ageInWeeks = current date - chicken.get date of birth / 7
    // if age > 21 age = 21
    // if age is < 21 and odd - 1
    // Double feed = chickenFeedNeed.get(age)
    // Return feed
    //}
    // 

    /* 
    public List<Chicken> getDescendants(Chicken chicken){
        List<Chicken> descendants = new ArrayList<Chicken>();
        descendants = findChildren(chicken, descendants);
        return descendants;
    }

    //Recursive Method where Takes in a chicken and a list and adds the children to the list then adds the children of the children to the list and then children of children of children and so on...

    public List<Chicken> findChildren(Chicken chicken, List<Chicken> descendants){
        for (Chicken c:chicken.getChildren()) {
            descendants.add(c);
            if(c.getChildren().size() == 0){
                return descendants;
            } else {
                findChildren(c, descendants);
            }
        }
        return descendants;
    } */
}
