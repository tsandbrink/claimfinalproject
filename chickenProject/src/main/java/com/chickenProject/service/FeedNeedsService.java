package com.chickenProject.service;

import com.chickenProject.repo.FeedNeedsRepo;
import com.chickenProject.entity.Chicken;
import com.chickenProject.entity.FeedNeeds;
import com.chickenProject.entity.Flock;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class FeedNeedsService {
    @Autowired
    private FeedNeedsRepo feedNeedsRepo;
    @Autowired
    private ChickenService chickenService;

    public FeedNeeds save(FeedNeeds feedNeeds) {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

	    return feedNeedsRepo.save(feedNeeds);
	}
	
	public FeedNeeds update(FeedNeeds feedNeeds) throws Exception {
		// Another predefined function, used to save your objects
		// Id will be autogenerated and will come back in the return after its saved

        if(feedNeeds.getId() != null) {
	        return feedNeedsRepo.save(feedNeeds);
        }

        throw new Exception("Object does not exist! id not present");
	}
    
    public FeedNeeds findById(Integer feedNeedsId) throws Error {
        
    	// Find by is another predefined repo function, you can always find by the primary key
    	// when you use findById, its good practice to use the isPresent in an if check first
    	// It will tell you if a object was actually found, with true or false values, true if found, false is not
    	// It will always return an Optional Object, the feedNeeds will be there if found, null if not
    	// If found, give the object back with a .get() to grab it off the Optional object
    	
        if(feedNeedsRepo.findById(feedNeedsId).isPresent()) {
            return feedNeedsRepo.findById(feedNeedsId).get();
        }
        
        // if feedNeeds is not present, throw error so front end can handle it
        throw new Error("No feedNeeds id present, FeedNeeds not found, send an id billy, dumbass");
        
    }

    public FeedNeeds findByAge(Long age){
        return feedNeedsRepo.findByAge(age);
    }

	public List<FeedNeeds> findAll() {
		return feedNeedsRepo.findAll();
	}

    public void deleteById(Integer id) {
	    feedNeedsRepo.deleteById(id);
	}

    public Double getFlockFeedNeeds(Flock flock){
		Double feedAmount = 0.0;
		for (Chicken c : flock.getChickensInFlock()) {
			Long age  = chickenService.calculateAgeInWeeks(c);
            if (age > 20){
                age = 21l;
            } else if (age%2 != 0){
                age = age + 1;
            } 
            FeedNeeds feedNeeds = feedNeedsRepo.findByAge(age);
            feedAmount += feedNeeds.getFeedNeed();
		}
		return feedAmount;
	}
}
